/*Gordon Stangler
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1+2+3+4+5+6+7=28.
The first ten terms would be:  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Notes:  T_n = n(n+1)/2.  GCD(n,n+1) = 1  Not every divisor of T_n is prime.
*/
#include <iostream>
//#include <omp.h>
int NumDivisors(int);
float sqrt_app(float);

int main()
{
	int num = 0;
	int i=1;

	while(NumDivisors(num) < 500)
	{
		num += i;
		i++;
	}

	std::cout<< "The first triangle number with over 500 factors is: " << num;
	return 0;
}

int NumDivisors(int n)
{
	int nod = 0;
	int sqrt_nod = n;
//	sqrt_nod = (1 << 29) + (sqrt_nod >> 1) - (1 << 22) + -0x4c000; //error should be less than 5%
//	std::cout << sqrt_nod << ", " << n << std::endl; //debugging
	sqrt_nod = (int)sqrt_app((float)n);

#pragma omp parallel for ordered schedule(dynamic)//shared(n, nod) private(i)
//#pragma omp for schedule(dynamic, 1) 
	for(int i=1;i<sqrt_nod;i++)
	{
		if(0 ==n%i)
			nod += 2;
	}
#pragma omp ordered
	{
	if(sqrt_nod * sqrt_nod == n)
		nod--; 
	}//end of parallel section

	return nod;
}

float sqrt_app(float z)
{
	int valint = *(int*)&z;
	valint -= 1 << 23;
	valint >>= 1;
	valint += 1 << 29;

	return *(float*)&valint;
}
